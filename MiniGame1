let bgImage;
let preGameBgImage; // 시작 화면 배경 이미지
let startButtonImage; // 시작 버튼 이미지
let images = []; // 가위, 바위, 보 이미지를 저장할 배열
let currentImageIndex = 0; // 현재 표시할 이미지 인덱스
let lastChangeTime = 0; // 마지막으로 이미지가 바뀐 시간
let changeInterval = 100; // 이미지가 바뀌는 시간 간격 (100ms)
let questionMarkImage; // 물음표 이미지를 저장할 변수
let userChoiceImages = []; // 이용자 선택용 이미지를 저장할 배열
let clickedImages = []; // 클릭되었을 때의 이미지를 저장할 배열
let selectedIndex = -1; // 선택된 인덱스를 저장 (-1: 선택 안 됨)
let gameResultImage = null; // 게임 결과 이미지를 저장할 변수
let gameEnded = false; // 게임이 끝났는지 확인하는 변수
let gameStarted = false; // 게임 시작 여부를 확인하는 변수

// 결과 이미지를 저장할 변수
let resultImages = {
  Win: null,
  Lose: null,
  Draw: null
};

// 마우스 오버 상태를 저장할 변수
let isHoveringStartButton = false;
let isHoveringChoice = [-1, -1, -1]; // 각 선택 버튼에 대해 마우스 오버 상태 추적

function preload() {
  // 배경 이미지 로드
  bgImage = loadImage('assets/미니게임1_Background.png');
  preGameBgImage = loadImage('assets/MiniGame1_Background_PreGame.png'); // 게임 시작 화면 배경
  startButtonImage = loadImage('assets/MiniGame1_Asset_PreGame_PressStart.png'); // 시작 버튼 이미지

  // 가위, 바위, 보 이미지를 로드
  images[0] = loadImage('assets/미니게임1_Asset_화면중앙용_보.png');
  images[1] = loadImage('assets/미니게임1_Asset_화면중앙용_가위.png');
  images[2] = loadImage('assets/미니게임1_Asset_화면중앙용_바위.png');

  // 물음표 이미지를 로드
  questionMarkImage = loadImage('assets/미니게임1_Asset_이용자선택전!!!_물음표.png');

  // 이용자 선택용 이미지를 로드
  userChoiceImages[0] = loadImage('assets/미니게임1_Asset_이용자선택용_보.png');
  userChoiceImages[1] = loadImage('assets/미니게임1_Asset_이용자선택용_가위.png');
  userChoiceImages[2] = loadImage('assets/미니게임1_Asset_이용자선택용_바위.png');

  // 클릭됐을 때의 이미지를 로드
  clickedImages[0] = loadImage('assets/미니게임1_Asset_이용자선택용(클릭됐을때)_보.png');
  clickedImages[1] = loadImage('assets/미니게임1_Asset_이용자선택용(클릭됐을때)_가위.png');
  clickedImages[2] = loadImage('assets/미니게임1_Asset_이용자선택용(클릭됐을때)_바위.png');

  // 결과 이미지를 미리 로드
  resultImages.Win = loadImage('assets/미니게임1_Asset_결과_YouWin.png');
  resultImages.Lose = loadImage('assets/미니게임1_Asset_결과_YouLose.png');
  resultImages.Draw = loadImage('assets/미니게임1_Asset_결과_Draw.png');
}

function setup() {
  createCanvas(windowWidth, windowHeight); // 캔버스를 화면 크기에 맞게 설정
}

function draw() {
  // 게임이 시작되지 않았다면, 시작 화면 표시
  if (!gameStarted) {
    background(preGameBgImage); // 시작 화면 배경

    // 버튼 크기 설정 (폭 20%, 높이 3%)
    let startButtonWidth = width * 0.2;
    let startButtonHeight = height * 0.03;
    let startButtonX = (width - startButtonWidth) / 2; // 중앙에 배치
    let startButtonY = height * 0.9; // Y 위치는 화면 높이의 90%로 설정

    // 마우스가 버튼 위에 있는지 확인
    if (
      mouseX > startButtonX &&
      mouseX < startButtonX + startButtonWidth &&
      mouseY > startButtonY &&
      mouseY < startButtonY + startButtonHeight
    ) {
      isHoveringStartButton = true; // 마우스가 버튼 위에 있음
    } else {
      isHoveringStartButton = false; // 마우스가 버튼 위에 없음
    }

    // 버튼 크기를 확대 (마우스가 버튼 위에 있을 때만)
    if (isHoveringStartButton) {
      startButtonWidth *= 1.14;
      startButtonHeight *= 1.14;
      startButtonX = (width - startButtonWidth) / 2; // 확대 후 중앙 배치
      startButtonY = height * 0.9; // Y 위치는 그대로 유지
    }

    image(startButtonImage, startButtonX, startButtonY, startButtonWidth, startButtonHeight); // 시작 버튼 표시
  } else {
    // 게임이 시작되었으면 본 게임 화면 표시
    background(bgImage);

    // 중앙의 가위, 바위, 보 이미지 표시
    let imgSize = width * 0.15;
    let centerX = width * 0.2;
    let centerY = height * 0.5 - imgSize * 0.5;
    let img = images[currentImageIndex];
    image(img, centerX, centerY, imgSize, imgSize);

    // 물음표 이미지 표시
    let questionSize = width * 0.1;
    image(questionMarkImage, width * 0.6, height * 0.4, questionSize, questionSize);

    // 이용자 선택용 이미지 표시
    for (let i = 0; i < userChoiceImages.length; i++) {
      let choiceX = width * 0.8;
      let choiceY = height * (0.2 + i * 0.25);
      let choiceSize = width * 0.1;

      // 마우스 오버 시 클릭된 상태로 이미지 변경
      if (isHoveringChoice[i]) {
        image(clickedImages[i], choiceX, choiceY, choiceSize, choiceSize);
      } else {
        image(userChoiceImages[i], choiceX, choiceY, choiceSize, choiceSize);
      }
    }

    if (gameEnded) {
      // 배경 블러 효과
      push();
      filter(BLUR, 3); // BLUR 적용 (10은 블러 강도)
      pop();

      // 결과 이미지 표시
      let resultWidth = gameResultImage.width;
      let resultHeight = gameResultImage.height;
      image(
        gameResultImage.image,
        width * 0.5 - resultWidth * 0.5,
        height * 0.5 - resultHeight * 0.5,
        resultWidth,
        resultHeight
      );
    } else {
      // 게임이 끝나지 않았다면 이미지 변경 로직 실행
      if (millis() - lastChangeTime > changeInterval && selectedIndex === -1) {
        currentImageIndex = (currentImageIndex + 1) % images.length;
        lastChangeTime = millis();
      }
    }
  }
}

// 창 크기 변경 시 캔버스 크기 조정
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

// 마우스 움직일 때 이미지 변경
function mouseMoved() {
  for (let i = 0; i < userChoiceImages.length; i++) {
    let choiceX = width * 0.8;
    let choiceY = height * (0.2 + i * 0.25);
    let choiceSize = width * 0.1;

    if (
      mouseX > choiceX &&
      mouseX < choiceX + choiceSize &&
      mouseY > choiceY &&
      mouseY < choiceY + choiceSize
    ) {
      isHoveringChoice[i] = true; // 해당 이미지에 마우스 오버
    } else {
      isHoveringChoice[i] = false; // 마우스가 벗어나면 원래 상태로 돌아감
    }
  }
}

// 마우스 클릭 이벤트
function mousePressed() {
  if (!gameStarted) {
    // 시작 버튼 클릭 시 게임 시작
    let startButtonWidth = width * 0.2; // 버튼 크기 폭 20%
    let startButtonHeight = height * 0.03; // 버튼 크기 높이 3%
    let startButtonX = (width - startButtonWidth) / 2; // 중앙에 배치
    let startButtonY = height * 0.9; // Y 위치는 화면 높이의 90%로 설정

    if (
      mouseX > startButtonX &&
      mouseX < startButtonX + startButtonWidth &&
      mouseY > startButtonY &&
      mouseY < startButtonY + startButtonHeight
    ) {
      gameStarted = true; // 게임 시작
    }
  } else {
    if (gameEnded) return; // 게임이 끝났으면 클릭 무시

    for (let i = 0; i < userChoiceImages.length; i++) {
      let choiceX = width * 0.8;
      let choiceY = height * (0.2 + i * 0.25);
      let choiceSize = width * 0.1;

      if (
        mouseX > choiceX &&
        mouseX < choiceX + choiceSize &&
        mouseY > choiceY &&
        mouseY < choiceY + choiceSize
      ) {
        selectedIndex = i; // 선택된 이미지의 인덱스 저장
        determineWinner(); // 승패 결정 함수 호출
        break; // 클릭된 이미지가 있으면 루프 종료
      }
    }
  }
}

function determineWinner() {
  if (selectedIndex === -1) return; // 사용자가 선택하지 않았다면 리턴

  // 승패 규칙에 따라 결과 결정
  let result = "";
  if (selectedIndex === currentImageIndex) {
    result = "Draw"; // 무승부
  } else if (
    (selectedIndex === 0 && currentImageIndex === 2) || // 보 vs 바위
    (selectedIndex === 1 && currentImageIndex === 0) || // 가위 vs 보
    (selectedIndex === 2 && currentImageIndex === 1)    // 바위 vs 가위
  ) {
    result = "Win"; // 승리
  } else {
    result = "Lose"; // 패배
  }

  // 결과 이미지 설정
  if (result === "Win") {
    gameResultImage = { 
      image: resultImages.Win,
      width: width * 0.38, // 승리 시 폭 38%
      height: height * 0.7 // 승리 시 높이 70%
    };
  } else if (result === "Lose") {
    gameResultImage = { 
      image: resultImages.Lose,
      width: width * 0.38, // 패배 시 폭 38%
      height: height * 0.7 // 패배 시 높이 70%
    };
  } else if (result === "Draw") {
    gameResultImage = { 
      image: resultImages.Draw,
      width: width * 0.38, // 무승부 시 폭 38%
      height: height * 0.7 // 무승부 시 높이 70%
    };
  }

  gameEnded = true; // 게임 종료 상태로 설정
}
