let finalbackground1
let finalbackground2
let fingerImage;
let scaleFactor = 1;
let scaleDirection = 1;
let scaleSpeed = 0.02;
let backgroundSwitch = false; 
let showFingerImage = true;

function preload() {
finalbackground1 = loadImage('assets/Final_Background-1.png');
finalbackground2 = loadImage('assets/Final_Background-2.png');
fingerImage = loadImage('assets/Final_Asset-1_Finger.png')}
// Supabase 클라이언트 생성
const supabaseUrl = 'https://macohdyxynalgylmoujt.supabase.co';  // Supabase URL
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hY29oZHl4eW5hbGd5bG1vdWp0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzMwMDkyNDMsImV4cCI6MjA0ODU4NTI0M30.VctPCHYIDd63-xDNpZwKoIQnxWOta7C13clR0L28XSA';  // Supabase Key
//const supabase = supabase.createClient(supabaseUrl, supabaseKey);  // Supabase 클라이언트 생성

// p5.js 초기화
function setup() {
    createCanvas(960, 540);
    supabase = createClient(
        supabaseUrl,
        supabaseKey
      );

      const clickXMin = 400, clickXMax = 600;
      const clickYMin = 150, clickYMax = 450;
  
      // 클릭 범위 내에서 마우스 클릭 시 QR 코드 생성
      mousePressed = function() {
          // 클릭된 좌표가 지정된 범위 내에 있는지 확인
          if (mouseX >= clickXMin && mouseX <= clickXMax && mouseY >= clickYMin && mouseY <= clickYMax) {
              captureAndUpload(); // 범위 내 클릭 시 캡처 후 업로드
              backgroundSwitch = true;
              showFingerImage = false;
          }
      }
  }

function draw() {
  // 배경 이미지를 화면에 그립니다
  if (backgroundSwitch) {
    image(finalbackground2, 0, 0, width, height);  // 배경2를 그린다
} else {
    image(finalbackground1, 0, 0, width, height);  // 배경1을 그린다
}

  push();  // 상태 저장
  translate(520, height / 2+80);  // 화면 중앙으로 이동
  scale(scaleFactor);  // 현재 scaleFactor로 스케일 조정
  imageMode(CENTER);  // 이미지의 중앙을 기준으로 그리기
  if (showFingerImage) {
    image(fingerImage, 0, 0);  // fingerImage를 화면 중앙에 그리기
}
  pop();  // 상태 복원

  // 스케일을 확장/축소
  scaleFactor += scaleDirection * scaleSpeed;
  
  // 스케일 값이 범위를 벗어나면 방향을 반대로 바꿈
  if (scaleFactor > 1.3 || scaleFactor < 0.7) {
    scaleDirection *= -1;
  }
}



const dataURLtoFile = (dataurl, fileName) => {
    var arr = dataurl.split(","),
      mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]),
      n = bstr.length,
      u8arr = new Uint8Array(n);
  
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
  
    return new File([u8arr], fileName, { type: mime });
  };
  
// 캡처 후 업로드하는 함수
async function captureAndUpload() {
    let currentFrameImage = get(398,172,163,248); 
    let maskImage = createGraphics(500, 300);
    maskImage.noStroke();  // 검정색으로 잘라내는 영역 설정
    fill(127, 111, 94);


    let base64Image = currentFrameImage.canvas.toDataURL();
    //const canvas = document.querySelector('canvas');  // 캔버스에서 이미지 데이터 가져오기
    //const dataUrl = canvas.toDataURL('image/jpeg');  // 이미지 데이터 URL로 변환

    const imageName = `public/image_${Date.now()}.jpg`;  // 이미지 파일 이름 (현재 시간 기준)
    const imageFile = dataURLtoFile(base64Image, imageName)
    // Supabase에 이미지 업로드
    const { data, error } = await supabase.storage
        .from('test')  // 'test' 버킷에 업로드
        .upload(imageName, imageFile, {  // Base64 데이터를 업로드
            contentType: 'image/jpeg',
            upsert: true
        });

    // 업로드 오류 처리
    if (error) {
        console.error('이미지 업로드 실패:', error.message);
        alert('이미지 업로드 실패: ' + error.message);  // 오류 메시지 사용자에게 표시
        return;
    }

    console.log('이미지 업로드 성공:', data);  // 업로드 성공 시 로그

    // 업로드된 이미지 URL 얻기
    
    const imageUrl = `https://macohdyxynalgylmoujt.supabase.co/storage/v1/object/public/test/${imageName}`;
    console.log('업로드된 이미지 URL:', imageUrl);
a
    // QR 코드 생성
    generateQRCode(imageUrl);
}

// QR 코드 생성 함수
function generateQRCode(url) {
    const qrCodeDiv = document.querySelector('#qr-code');
    qrCodeDiv.innerHTML = '';  // 기존 QR 코드 제거


    qrCodeDiv.style.position = 'absolute';  // 절대 위치 설정
    qrCodeDiv.style.top = '102%';            // 세로 중앙으로 위치 설정
    qrCodeDiv.style.left = '52.5%';           // 가로 중앙으로 위치 설정
    qrCodeDiv.style.transform = 'translate(-50%, -50%)';  // 정확한 중앙 정렬

    new QRCode(qrCodeDiv, {
      text: url,
      width: 100,   // QR 코드 너비
      height: 100,   // QR 코드 높이
      correctLevel: QRCode.CorrectLevel.H,  // 오류 수정 수준 설정 (필요시)
  });

  // 생성된 QR 코드의 스타일을 CSS로 변경
  const qrCodeSVG = qrCodeDiv.querySelector('svg');
    if (qrCodeSVG) {
        const paths = qrCodeSVG.querySelectorAll('path');
        paths.forEach(path => {
            path.setAttribute('fill', '#FFFFFF');  // QR 코드 바코드 색을 흰색으로 설정
        });
        qrCodeSVG.style.backgroundColor = 'transparent'; // 배경을 투명으로 설정
    }
}

